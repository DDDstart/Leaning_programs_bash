#!/bin/bash

# Циклы FOR перебор списка простых значений
###
for var in яблоко соль кусок небо second
do
   echo "Это $var вещь"
   echo Это $var вешь # ECHO можно записать без кавычек
done # Переменная $var сохраняет свое значение при выходе из цикла, её содержимое можно менять. Работать с ней можно как с любой другой переменной

# Перебор сложных значений
###
for var in яблоко "белая соль" "кусок хрена" "second position"
do
   echo "Это: $var"
   echo Это: $var # ECHO можно записать без кавычек
done

# Вывод по словам. Инициализация цикла списком, полученным из результатов работы команды
myfile=02_BASH_Циклы_file
for var in $(cat $myfile)
do
   echo " $var"
done

# Вывод по строкам. Разделители полей
# Разделителями полей (Internal Field Separator - IFS) являются: пробел, знак табуляции, знак перевода строки
# Если bash встречает в данных любой из этих символов, он считает, что перед ним — следующее самостоятельное значение списка
# !!! Можно временно изменить переменную среды IFS, чтобы в качестве разделителя полей был только перевод строки, а табуляция и пробелы игнорировались: IFS=$'\n'
###
myfile=02_BASH_Циклы_file
IFS=$'\n' # Разделителем является перевод строки
for var in $(cat $myfile)
do
   echo " $var"
done

# В качестве разделителя полей можно использовать любой символ, например ":"
###
myfile=/etc/passwd
IFS=$':'
for var in $(cat $myfile)
do
   echo " $var"
done

# Обход файлов, содержащихся в директории
# вывод списка файлов и папок
###
path="/home/ddd/*" # ! Знак "*" значит использовать все файлы с любыми именами
for file in $path
do
   if [ -d $file ]
      then
         echo "Файл $file является директорией"
   elif [ -f $file ]
      then
         echo "Файл $file является файлом"
   fi
done

# Циклы for в стиле языка "C"
###
for ((i=1; i<10; i++)) # ! Нужно использовать двойные круглые скобки
do
   echo "Счетчик: $i"
done

# Цикл while (Используется для выполнения чего-нибудь до тех пор, пока некое условие выполняется)
###
var=5
while [ $var -gt 0 ] # Такая же конфигурация квадратных скобок, как при проверке условия в IF ! Перед "gt" должен быть "-"
do
   var=$(($var-1)) # Используется "$()" а внутри !В СКОБКАХ математическое выражение. Но можно использовать и такое "var=$[$var - 1]". Лучше квадратные скобки всегда использовать только для проверки условий
   echo "$var"
done

# Вложенные циклы
###
for ((j=1;j<=3;j++)) # Можно убирать пробелы после ";", но лучше всегда использовать пробелы для наглядности
do
   echo "Старт внешнего цикла $a"
      for ((k=1; k<= 3; k++))
      do
         echo "   Старт внутреннего цикла $k"
      done
done

# Обработка содержимого файла
# Так, внешний цикл занимается перебором строк файла, а внутренний уже работает с каждой строкой этого файла
###
file="/etc/passwd"
IFS=$'\n' # Разделителем является перевод строки
for stroka in $(cat $file)
do
   echo "Строка файла: $stroka"
   IFS=$':' # Разделителем является двоеточие
   for slovo in $stroka
   do
      echo "Слово файла: $slovo"
   done
done

# Управление циклами BREAK, CONTINUE
# Команда BREAK для цикла FOR
# BREAK останавливает цикл, при достижении переменной цикла определённого значения
###
for var in 1 2 3 4 5 6 7 8 9 10
do
   if [ $var -eq 5 ]
   then
      break
   fi
echo "Счетчик: $var"
done

# Команда BREAK для цикла FOR, который С-вида :)
###
for ((i=1; i<10; i++)) # ! Нужно использовать двойные круглые скобки
do
   if [ $i -eq 5 ]
   then
      break
   fi
   echo "Счетчик еще один: $i"
done

# Управление циклами BREAK, CONTINUE
# Команда BREAK для цикла WHILE
###
var=1
while [ $var -lt 10 ]
do
   if [ $var -eq 5 ]
   then
      break
   fi
echo "Счетчик: $var"
var=$(($var+1))
done

# Команда CONTINUE
# Когда в теле цикла встречается эта команда, текущая итерация завершается досрочно и начинается следующая, при этом выхода из цикла не происходит
###
for ((var=1; var<15; var++))
do
   if [ $var -gt 5 ] && [ $var -lt 10 ]
   then
      continue
   fi
echo "Итерация №: $var "
done

# Обработка вывода, выполняемого в цикле. Вывод в ФАЙЛ
###
for ((i=1; i<10; i++))
do
   echo "*** Число: $i"
done > myfile.txt
echo "Программа завершена"

# Обработка вывода, выполняемого в цикле. Вывод в ФАЙЛ. Моя версия программы
###
for ((i=1; i<10; i++))
do
   echo "*** Число: $i" >> myfile1.txt ## ">>" дозаписывает данные в конец файла
done
echo "Программа завершена"

# Пример: поиск исполняемых файлов
# Надо выяснить, какие именно исполняемые файлы доступны в системе. Просканируем все папки, записанные в переменную окружения PATH
###
for folder1 in $PATH
do
   echo "Калалог $folder1"
   for file1 in $folder1/* # ! Нужно указать "/*", чтобы сканировались все файлы в каталогах
   do
      if [ -x $file1 ]
      then
         echo "Исполняемый файл $file1"
      fi
   done
done
